// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: v1/rule.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuleClient is the client API for Rule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleClient interface {
	SaveRules(ctx context.Context, in *SaveRulesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRules(ctx context.Context, in *DeleteRulesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RulesResponse, error)
}

type ruleClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleClient(cc grpc.ClientConnInterface) RuleClient {
	return &ruleClient{cc}
}

func (c *ruleClient) SaveRules(ctx context.Context, in *SaveRulesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.v1.Rule/SaveRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) DeleteRules(ctx context.Context, in *DeleteRulesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.v1.Rule/DeleteRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) GetRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RulesResponse, error) {
	out := new(RulesResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.Rule/GetRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServer is the server API for Rule service.
// All implementations must embed UnimplementedRuleServer
// for forward compatibility
type RuleServer interface {
	SaveRules(context.Context, *SaveRulesRequest) (*emptypb.Empty, error)
	DeleteRules(context.Context, *DeleteRulesRequest) (*emptypb.Empty, error)
	GetRules(context.Context, *emptypb.Empty) (*RulesResponse, error)
	mustEmbedUnimplementedRuleServer()
}

// UnimplementedRuleServer must be embedded to have forward compatible implementations.
type UnimplementedRuleServer struct {
}

func (UnimplementedRuleServer) SaveRules(context.Context, *SaveRulesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRules not implemented")
}
func (UnimplementedRuleServer) DeleteRules(context.Context, *DeleteRulesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRules not implemented")
}
func (UnimplementedRuleServer) GetRules(context.Context, *emptypb.Empty) (*RulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRules not implemented")
}
func (UnimplementedRuleServer) mustEmbedUnimplementedRuleServer() {}

// UnsafeRuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleServer will
// result in compilation errors.
type UnsafeRuleServer interface {
	mustEmbedUnimplementedRuleServer()
}

func RegisterRuleServer(s grpc.ServiceRegistrar, srv RuleServer) {
	s.RegisterService(&Rule_ServiceDesc, srv)
}

func _Rule_SaveRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).SaveRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.Rule/SaveRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).SaveRules(ctx, req.(*SaveRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_DeleteRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).DeleteRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.Rule/DeleteRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).DeleteRules(ctx, req.(*DeleteRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_GetRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).GetRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.Rule/GetRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).GetRules(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Rule_ServiceDesc is the grpc.ServiceDesc for Rule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.Rule",
	HandlerType: (*RuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveRules",
			Handler:    _Rule_SaveRules_Handler,
		},
		{
			MethodName: "DeleteRules",
			Handler:    _Rule_DeleteRules_Handler,
		},
		{
			MethodName: "GetRules",
			Handler:    _Rule_GetRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/rule.proto",
}
